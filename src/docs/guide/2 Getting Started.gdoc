h4. The first step is to add a dependency for the plugin in @BuildConfig.groovy@:

{code}
plugins {
   ...
   runtime ':database-migration:1.1'
}
{code}

or install with @install-plugin@:

{code}
grails install-plugin database-migration
{code}

h4. Typical initial workflow

Next you'll need to create an initial changelog. You can use Liquibase XML or the plugin's Groovy DSL for individual files. You can even mix and match; Groovy files can include other Groovy files and Liquibase XML files (but XML files can't include Groovy files).

Depending on the state of your database and code, you have two options; either create a changelog from the database or create it from your domain classes. The decision tends to be based on whether you prefer to design the database and adjust the domain classes to work with it, or to design your domain classes and use Hibernate to create the corresponding database structure.

To create a changelog from the database, use the [dbm-generate-changelog|Rollback Scripts] script:
{code}
grails dbm-generate-changelog changelog.groovy
{code}

or

{code}
grails dbm-generate-changelog changelog.xml
{code}

depending on whether you prefer the Groovy DSL or XML. The filename is relative to the changelog base folder, which defaults to @grails-app/migrations@.

{note}
If you use the XML format (or use a non-default Groovy filename), be sure to change the name of the file in @Config.groovy@ so @dbm-update@ and other scripts find the file:
{code}
grails.plugin.databasemigration.changelogFileName = 'changelog.xml'
{code}
{note}

Since the database is already correct, run the [dbm-changelog-sync|Maintenance Scripts] script to record that the changes have already been applied:
{code}
grails dbm-changelog-sync
{code}

Running this script is primarily a no-op except that it records the execution(s) in the Liquibase DATABASECHANGELOG table.

To create a changelog from your domain classes, use the [dbm-generate-gorm-changelog|Rollback Scripts] script:

{code}
grails dbm-generate-gorm-changelog changelog.groovy
{code}

or

{code}
grails dbm-generate-gorm-changelog changelog.xml
{code}

If you haven't created the database yet, run the [dbm-update|Update Scripts] script to create the corresponding tables:

{code}
grails dbm-update
{code}

or the [dbm-changelog-sync|Maintenance Scripts] script if the database is already in sync with your code:

{code}
grails dbm-changelog-sync
{code}

{note}
If you're also using the searchable plugin, then you need to configure it to run after the database migrations have run.  e.g. 
In Searchable.groovy or in your Config.groovy if that's where you're configuring Searchable:
{code}
// disable the plugin's operations here.  we'll re-enable them in the Bootstrap to avoid conflicts with database-migration
mirrorChanges = false
bulkIndexOnStartup = false
{code}

In Bootstrap.groovy:
{code}
class BootStrap {
    def searchableService
    def init = { servletContext ->
        // do any data loading you would normally do
        
        // Manually start the mirroring process to ensure that it comes after the automated migrations.
        println "Performing bulk index"
        searchableService.reindex()
        println "Starting mirror service"
        searchableService.startMirroring()
    }
}
{code}
{note}

h4. Source control

Now you can commit the changelog and the corresponding application code to source control. Other developers can then update and syncronize their databases, and start doing migrations themselves.

